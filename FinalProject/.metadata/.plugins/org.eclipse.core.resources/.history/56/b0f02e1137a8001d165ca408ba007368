package com.java.pms;

import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;



@ManagedBean(name="lDao")
@SessionScoped
public class LoginDaoImpl implements LoginDao {
	
	private String otp;
	

	public String getOtp() {
		return otp;
	}

	public void setOtp(String otp) {
		this.otp = otp;
	}

	@Override
	public String validateMe(Login login) {
		String encr = EntryptPassword.getCode(login.getPassCode());
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		cr.add(Restrictions.eq("userName", login.getUserName()));
		cr.add(Restrictions.eq("passCode", encr.trim()));
		cr.setProjection(Projections.rowCount());
		long count = (Long) cr.uniqueResult();
		if (count == 1) {
			return "menu.xhtml?faces-redirect=true";
		} else {
			sessionMap.put("error", "Invalid Credentials...");
			return "Login.xhtml?faces-redirect=true";
		}
	}

	@Override
	public String addUser(Login login) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		String encPwd = EntryptPassword.getCode(login.getPassCode());
		login.setPassCode(encPwd);
		Transaction t = session.beginTransaction();
		session.save(login);
		t.commit();
		System.out.println("Record Inserted...");
		return "Login.xhtml?faces-redirect=true";
	}
	
	static char[] One_Time_Password(int len) {
		System.out.println("Generating password using random() : ");
		System.out.print("Your new password is : ");
		String numbers = "0123456789";
		Random rndm_method = new Random();
		char[] password = new char[len];
		for (int i = 0; i < len; i++) {
			password[i] = numbers.charAt(rndm_method.nextInt(numbers.length()));
			}
		return password;
	}

	@Override
	public String oneTimePass(String otp) {
		SendMail sm = new SendMail();
		
		Pass pass= new Pass();
		
		return null;
	}
	
	
}
