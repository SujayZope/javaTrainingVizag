package com.java.pms;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Random;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;



@ManagedBean(name="lDao")
@SessionScoped
public class LoginDaoImpl implements LoginDao {
	
	

	@Override
	public String validateMe(Login login) {
		String encr = EntryptPassword.getCode(login.getPassCode());
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		cr.add(Restrictions.eq("userName", login.getUserName()));
		cr.add(Restrictions.eq("passCode", encr.trim()));
		cr.setProjection(Projections.rowCount());
		long count = (Long) cr.uniqueResult();
		if (count == 1) {
			return "menu.xhtml?faces-redirect=true";
		} else {
			sessionMap.put("error", "Invalid Credentials...");
			return "Login.xhtml?faces-redirect=true";
		}
		
	}
	
	@Override
	public String validateOtp(Login login) {
		
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		cr.add(Restrictions.eq("userName", login.getUserName()));
		cr.add(Restrictions.eq("otpNo", login.getOtpNo()));
		cr.setProjection(Projections.rowCount());
		long count = (Long) cr.uniqueResult();
		if (count == 1) {
			return "reset.xhtml?faces-redirect=true";
		} else {
			sessionMap.put("error", "Invalid Credentials...");
			return "You enteres wrong password";
		}
		
		
		/*String encr = EntryptPassword.getCode(login.getPassCode());
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		long  count =(Long)cr.uniqueResult();
		Login userFound = searchByLoginUser(login.getUserName());
		String email = userFound.getUserName();
		
		long otpCount = otpGenerate(login.getUserName());
		if (otpCount==0) {
			long otpNew = generateOtp();
			System.out.println(generateOtp());
			System.out.println("Email is " +email);
			SendMail.sendInfo(email, "Your OTP Generated", "Generated Otp is " +otpNew);
			Transaction tr = session.beginTransaction();
			Login otp = new Login();
			otp.setOtpNo(otpNew);
			otp.setUserName(login.getUserName());
			otp.setStatus("ACTIVE");
			session.save(otp);
			tr.commit();
			return "reset.xhtml?faces-redirect=true";
		}
		if (count==1) {
			Login c = searchByLoginUser(login.getUserName());
			//sessionMap.put("cname", c.getCustName());
			sessionMap.put("userName", c);
			SendMail.sendInfo("prasanna.trainer@gmail.com", "Confirmation", "You are Loggeed In");
			return "menu.xhtml?faces-redirect=true";			
		} else {
			sessionMap.put("error", "Invalid Credentials...");
			return "Login.xhtml?faces-redirect=true";
		}*/
		
	}
	
	@Override
	public String otp(Login login){
		
		Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		
		Login userFound = searchByLoginUser(login.getUserName());
		String email = userFound.getUserName();
		
//		long otpCount = otpGenerate(login.getUserName());
		
		
			long otpNew = generateOtp();
			System.out.println(generateOtp());
			System.out.println("Email is " +email);
			SendMail.sendInfo(email, "Your OTP Generated", "Generated Otp is " +otpNew);
			Transaction tr = session.beginTransaction();
			//Login otp = new Login();
			userFound.setOtpNo(otpNew);
			//otp.setOtpNo(otpNew);
			session.update(otp);
			tr.commit();
			return "reset.xhtml?faces-redirect=true";
			
	}

	@Override
	public String addUser(Login login) {
		login.setStatus("ACTIVE");
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		String encPwd = EntryptPassword.getCode(login.getPassCode());
		login.setPassCode(encPwd);
		Transaction t = session.beginTransaction();
		session.save(login);
		t.commit();
		System.out.println("Record Inserted...");
		return "Login.xhtml?faces-redirect=true";
	}
	
	public static int generateOtp() {
		Random r = new Random( System.currentTimeMillis() );
	    return ((1 + r.nextInt(2)) * 10000 + r.nextInt(10000));
	}
	
	public long otpGenerate(String userName) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session = sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		cr.add(Restrictions.eq("userName", userName));
		cr.setProjection(Projections.rowCount());
		long  count =(Long)cr.uniqueResult();
		System.out.println(count);
		return count;
	}

	
	@Override
	public Login searchByLoginUser(String userName) {
		SessionFactory sf = SessionHelper.getConnection();
		Session session =sf.openSession();
		Criteria cr = session.createCriteria(Login.class);
		cr.add(Restrictions.eq("userName", userName));
		Login user = (Login)cr.uniqueResult();
		System.out.println("Searched......");
		
		return user;
	}
	
	

}